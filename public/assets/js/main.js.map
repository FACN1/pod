{"version":3,"sources":["main.js"],"names":["makeRequest","method","url","callback","xhr","XMLHttpRequest","onreadystatechange","readyState","status","responseText","Error","open","send","clickLinkListener","element","addEventListener","event","preventDefault","console","log","path","href","err","res","error","document","getElementById","innerHTML","window","history","pushState","split","geo","navigator","geolocation","displayLocation","position","latitude","coords","longitude","div","getLocation","watchPosition","alert","onload"],"mappings":";;AAAA,IAAMA,cAAc,SAAdA,WAAc,CAACC,MAAD,EAASC,GAAT,EAAcC,QAAd,EAA2B;AAC7C,MAAMC,MAAM,IAAIC,cAAJ,EAAZ;AACAD,MAAIE,kBAAJ,GAAyB,YAAM;AAC7B,QAAIF,IAAIG,UAAJ,KAAmB,CAAvB,EAA0B;AACxB,UAAIH,IAAII,MAAJ,KAAe,GAAnB,EAAwB;AACtBL,iBAAS,IAAT,EAAeC,IAAIK,YAAnB;AACD,OAFD,MAEO;AACLN,iBAAS,IAAIO,KAAJ,CAAU,eAAV,EAA2BN,IAAII,MAA/B,CAAT;AACD;AACF;AACF,GARD;;AAUAJ,MAAIO,IAAJ,CAASV,MAAT,EAAiBC,GAAjB;AACAE,MAAIQ,IAAJ;AACD,CAdD;;AAgBA,IAAMC,oBAAoB,SAApBA,iBAAoB,CAACC,OAAD,EAAa;AACrCA,UAAQC,gBAAR,CAAyB,OAAzB,EAAkC,UAACC,KAAD,EAAW;AAC3CA,UAAMC,cAAN;AACAC,YAAQC,GAAR,CAAYH,KAAZ;AACAhB,gBAAY,KAAZ,EAAmBgB,MAAMI,IAAN,CAAW,CAAX,EAAcC,IAAjC,EAAuC,UAACC,GAAD,EAAMC,GAAN,EAAc;AACnD,UAAID,GAAJ,EAAS;AACPJ,gBAAQM,KAAR,CAAcF,GAAd;AACA;AACD;AACDG,eAASC,cAAT,CAAwB,gBAAxB,EAA0CC,SAA1C,GAAsDJ,GAAtD;AACAK,aAAOC,OAAP,CAAeC,SAAf,CAAyB,IAAzB,EAA+B,IAA/B,EAAqCd,MAAMI,IAAN,CAAW,CAAX,EAAcC,IAAd,CAAmBU,KAAnB,CAAyB,YAAzB,EAAuC,CAAvC,CAArC;;AAEAlB,wBAAkBY,SAASC,cAAT,CAAwB,UAAxB,CAAlB;AACD,KATD;AAUD,GAbD;AAcD,CAfD;;AAiBAb,kBAAkBY,SAASC,cAAT,CAAwB,UAAxB,CAAlB;;AAEA,IAAMM,MAAMC,UAAUC,WAAtB;;AAEA;AACA,IAAMC,kBAAkB,SAAlBA,eAAkB,CAACC,QAAD,EAAc;AACpC,MAAMC,WAAWD,SAASE,MAAT,CAAgBD,QAAjC;AACA,MAAME,YAAYH,SAASE,MAAT,CAAgBC,SAAlC;AACA,MAAMC,MAAMf,SAASC,cAAT,CAAwB,UAAxB,CAAZ;AACAc,MAAIb,SAAJ,6BAAwCU,QAAxC,qBAAgEE,SAAhE;AACD,CALD;;AAOA;AACA,IAAME,cAAc,SAAdA,WAAc,GAAM;AACxB,MAAIT,GAAJ,EAAS;AACPA,QAAIU,aAAJ,CAAkBP,eAAlB;AACD,GAFD,MAEO;AACLQ,UAAM,+BAAN;AACD;AACF,CAND;;AAQAf,OAAOgB,MAAP,GAAgBH,WAAhB","file":"main.js","sourcesContent":["const makeRequest = (method, url, callback) => {\n  const xhr = new XMLHttpRequest();\n  xhr.onreadystatechange = () => {\n    if (xhr.readyState === 4) {\n      if (xhr.status === 200) {\n        callback(null, xhr.responseText);\n      } else {\n        callback(new Error('Status Code: ', xhr.status));\n      }\n    }\n  };\n\n  xhr.open(method, url);\n  xhr.send();\n};\n\nconst clickLinkListener = (element) => {\n  element.addEventListener('click', (event) => {\n    event.preventDefault();\n    console.log(event);\n    makeRequest('GET', event.path[0].href, (err, res) => {\n      if (err) {\n        console.error(err);\n        return;\n      }\n      document.getElementById('outerContainer').innerHTML = res;\n      window.history.pushState(null, null, event.path[0].href.split('?ajax=true')[0]);\n\n      clickLinkListener(document.getElementById('loadLink'));\n    });\n  });\n};\n\nclickLinkListener(document.getElementById('loadLink'));\n\nconst geo = navigator.geolocation;\n\n// If supported run:\nconst displayLocation = (position) => {\n  const latitude = position.coords.latitude;\n  const longitude = position.coords.longitude;\n  const div = document.getElementById('location');\n  div.innerHTML = `You are at Latitude: ${latitude}, Longitude: ${longitude}`;\n};\n\n// Check for geo support\nconst getLocation = () => {\n  if (geo) {\n    geo.watchPosition(displayLocation);\n  } else {\n    alert('Geolocation API not supported');\n  }\n};\n\nwindow.onload = getLocation;\n"]}